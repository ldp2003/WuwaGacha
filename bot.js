require('dotenv').config(); // ƒê·ªçc t·ªáp .env

const { Client, GatewayIntentBits } = require('discord.js');

const token = process.env.DISCORD_TOKEN;

// T·∫°o client Discord
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

// C∆° s·ªü d·ªØ li·ªáu ng∆∞·ªùi d√πng
const users = {};

// Constants
const PITY_5 = 80;
const PITY_4 = 10;
const BASE_RATE_5 = 0.005;
const BASE_RATE_4 = 0.15;
const BASE_RATE_3 = 0.845;
const RATE_UP_5_STAR = "Carlotta";
const DEVIATED_5_STARS = ["Verina", "Cancharo", "Anko", "Danxin", "Linhdan"];

// Class User
class User {
    constructor(name) {
        this.name = name;
        this.pity5 = 0;
        this.pity4 = 0;
        this.last5StarDeviated = false;
        this.count5Star = 0;
        this.count5StarRateUp = 0;
        this.count5StarDeviated = 0;
        this.count4Star = 0;
        this.count3Star = 0;
        this.totalRolls = 0;
        this.fiveStarDetails = [];
    }

    reset() {
        this.pity5 = 0;
        this.pity4 = 0;
        this.last5StarDeviated = false;
        this.count5Star = 0;
        this.count5StarRateUp = 0;
        this.count5StarDeviated = 0;
        this.count4Star = 0;
        this.count3Star = 0;
        this.totalRolls = 0;
        this.fiveStarDetails = [];
    }

    getFiveStarRate() {
        return (this.count5Star / this.totalRolls * 100).toFixed(2);
    }

    getWinRate() {
        return this.count5Star ? (this.count5StarRateUp / this.count5Star * 100).toFixed(2) : 0;
    }
}

// Gacha simulation function
function simulateGacha(user, totalRolls) {
    const results = [];
    const r = Math.random;

    user.totalRolls += totalRolls;

    for (let i = 1; i <= totalRolls; i++) {
        user.pity5++;
        user.pity4++;
        let rate5 = BASE_RATE_5;
        let rate4 = BASE_RATE_4;
        let rate3 = BASE_RATE_3;

        if (user.pity5 > 65) {
            rate5 += (user.pity5 - 65) * 0.03;
            rate4 = (BASE_RATE_4 / (BASE_RATE_4 + BASE_RATE_3)) * (1 - rate5);
            rate3 = (BASE_RATE_3 / (BASE_RATE_4 + BASE_RATE_3)) * (1 - rate5);
        }

        const roll = r();
        if (roll < rate5 || user.pity5 >= PITY_5) {
            const deviated = r() < 0.5;
            if (deviated && !user.last5StarDeviated) {
                const deviatedCharacter = DEVIATED_5_STARS[Math.floor(r() * DEVIATED_5_STARS.length)];
                results.push(`**‚ú® 5‚òÖ Sadge: ${deviatedCharacter} (Pity: ${user.pity5})**`);
                user.fiveStarDetails.push(deviatedCharacter);
                user.last5StarDeviated = true;
                user.count5StarDeviated++;
            } else {
                results.push(`**üåüüåüüåü 5‚òÖ Rate Up: ${RATE_UP_5_STAR} (Pity: ${user.pity5}) üéâ**`);
                user.fiveStarDetails.push(RATE_UP_5_STAR);
                user.last5StarDeviated = false;
                user.count5StarRateUp++;
            }
            user.pity5 = 0;
            user.pity4 = 0;
            user.count5Star++;
        } else if (roll < rate5 + rate4 || user.pity4 >= PITY_4) {
            results.push(`**‚≠ê 4‚òÖ**`);
            user.pity4 = 0;
            user.count4Star++;
        } else {
            results.push(`3‚òÖ`);
            user.count3Star++;
        }
    }

    return results;
}

// S·ª± ki·ªán s·∫µn s√†ng
client.once('ready', () => {
    console.log(`Bot ƒë√£ s·∫µn s√†ng! ƒêƒÉng nh·∫≠p d∆∞·ªõi t√™n: ${client.user.tag}`);
});

// X·ª≠ l√Ω tin nh·∫Øn
client.on('messageCreate', (message) => {
    if (message.content.startsWith('/gacha')) {
        const args = message.content.split(' ');
        const rolls = parseInt(args[1]) || 10; // M·∫∑c ƒë·ªãnh roll 10 n·∫øu kh√¥ng nh·∫≠p s·ªë

        // L·∫•y ho·∫∑c t·∫°o ng∆∞·ªùi d√πng
        const userId = message.author.id;
        if (!users[userId]) {
            users[userId] = new User(message.author.username);
        }

        const user = users[userId];

        // Th·ª±c hi·ªán gacha
        const results = simulateGacha(user, rolls);

        const deviatedCount = user.count5StarDeviated;
        const rateUpCount = user.count5StarRateUp;

        let response;
        if (rolls > 100) {
            const rateUpCount = results.filter(res => res.includes("Rate Up")).length;
            const deviatedCount = results.filter(res => res.includes("Sadge")).length;

            // T√≠nh t·ªïng s·ªë 5‚òÖ, 4‚òÖ v√† 3‚òÖ trong l·∫ßn roll hi·ªán t·∫°i
            const totalFiveStarsThisRoll = results.filter(res => res.includes("5‚òÖ")).length;
            const totalFourStarsThisRoll = results.filter(res => res.includes("4‚òÖ")).length;
            const totalThreeStarsThisRoll = results.filter(res => res.includes("3‚òÖ")).length;
            response = `üé∞ **${user.name}'s Gacha Summary** üé∞
    - **Total rolls this time:** ${rolls}
    - **Total 5‚òÖ this time:** ${totalFiveStarsThisRoll} (Rate Up: ${rateUpCount}, L·ªách: ${deviatedCount})
    - **Total 4‚òÖ this time:** ${totalFourStarsThisRoll}
    - **Total 3‚òÖ this time:** ${totalThreeStarsThisRoll}
    
    üìã **5‚òÖ Characters Obtained:**
    ${user.fiveStarDetails.slice(-rolls).map((char, idx) => `#${idx + 1}: ${char}`).join('\n')}
    
    üìä **Stats:**
    - 5‚òÖ pity: ${user.pity5}
    - Total rolls (all time): ${user.totalRolls}
    - Total 5‚òÖ (all time): ${user.count5Star}
    - 5‚òÖ Rate (all time): ${user.getFiveStarRate()}%
    - Win rate (all time): ${user.getWinRate()}%
    - Total 5‚òÖ Rate Up (all time): ${user.count5StarRateUp}
    - Total 5‚òÖ l·ªách (all time): ${user.count5StarDeviated}
    - Total 4‚òÖ (all time): ${user.count4Star}
    - Total 3‚òÖ (all time): ${user.count3Star}`;
        } else {
            response = `üé∞ **${user.name}'s Gacha Results** üé∞
            ${results.map((res, idx) => `Roll ${idx + 1}: ${res}`).join('\n')}
    
    üìä **Stats:**
    - 5‚òÖ pity: ${user.pity5}
    - Total rolls (all time): ${user.totalRolls}
    - Total 5‚òÖ (all time): ${user.count5Star}
    - 5‚òÖ Rate (all time): ${user.getFiveStarRate()}%
    - Win rate (all time): ${user.getWinRate()}%
    - Total 5‚òÖ Rate Up (all time): ${user.count5StarRateUp}
    - Total 5‚òÖ l·ªách (all time): ${user.count5StarDeviated}
    - Total 4‚òÖ (all time): ${user.count4Star}
    - Total 3‚òÖ (all time): ${user.count3Star}`;
        }

        message.channel.send(response);
    } else if (message.content === '/resetpity') {
        const userId = message.author.id;
        if (users[userId]) {
            users[userId].reset();
            message.channel.send(`üîÑ **${message.author.username}**, l·ªãch s·ª≠ gacha c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i!`);
        } else {
            message.channel.send(`‚ö†Ô∏è **${message.author.username}**, b·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ gacha ƒë·ªÉ ƒë·∫∑t l·∫°i!`);
        }
    } else if (message.content === '/bag') {
        const userId = message.author.id;
        if (users[userId]) {
            const user = users[userId];
            const rateUp = user.fiveStarDetails.filter(char => char === RATE_UP_5_STAR);
            const deviated = user.fiveStarDetails.filter(char => DEVIATED_5_STARS.includes(char));

            const sortedBag = [...rateUp, ...deviated];
            const bagMessage = sortedBag.length > 0 ? sortedBag.join('\n') : "Ch∆∞a c√≥ nh√¢n v·∫≠t trong t√∫i gacha.";

            message.channel.send(`üéí **${user.name}'s Gacha Bag** üéí
  ${bagMessage}`);
        } else {
            message.channel.send(`‚ö†Ô∏è **${message.author.username}**, b·∫°n ch∆∞a th·ª±c hi·ªán gacha n√†o!`);
        }
    }
});

// ƒêƒÉng nh·∫≠p bot
client.login(token);
